const { Endereco } = require('../models/Endereco');



exports.createEndereco = async (req, res) => {
    try {
        const { Cep, Logradouro, Numero, Complemento, Bairro, Cidade, Estado, MunicipioIBGE } = req.body;


        const novoEndereco = await Endereco.create({
            Cep,
            Logradouro,
            Numero,
            Complemento,
            Bairro,
            Cidade,
            Estado,
            MunicipioIBGE
        });


        res.status(201).json(novoEndereco);
    } catch (error) {
        res.status(500).json({ error: 'Erro ao criar endereço', details: error.message });
    }
};


exports.getAllEnderecos = async (req, res) => {  
    try {
        const enderecos = await Endereco.findAll();
        res.status(200).json(enderecos);
    } catch (error) {
        res.status(500).json({ error: 'Erro ao buscar endereços', details: error.message });
    }
};


exports.getEnderecoById = async (req, res) => {
    try {
        const { id } = req.params;
        console.log(id)
        const endereco = await Endereco.findByPk(id);


        if (!endereco) {
            return res.status(404).json({ error: 'Endereço não encontrado' });
        }


        res.status(200).json(endereco);
    } catch (error) {
        res.status(500).json({ error: 'Erro ao buscar endereço', details: error.message });
    }
};


exports.updateEndereco = async (req, res) => {
    try {
        const { Id } = req.params;
        const { Cep, Logradouro, Numero, Complemento, Bairro, Cidade, Estado, MunicipioIBGE } = req.body;


        const endereco = await Endereco.findByPk(Id);


        if (!endereco) {
            return res.status(404).json({ error: 'Endereço não encontrado' });
        }


        endereco.Cep = Cep;
        endereco.Logradouro = Logradouro;
        endereco.Numero = Numero;
        endereco.Complemento = Complemento;
        endereco.Bairro = Bairro;
        endereco.Cidade = Cidade;
        endereco.Estado = Estado;
        endereco.MunicipioIBGE = MunicipioIBGE;


        await endereco.save();


        res.status(200).json(endereco);
    } catch (error) {
        res.status(500).json({ error: 'Erro ao atualizar endereço', details: error.message });
    }
};


exports.deleteEndereco = async (req, res) => {
    try {
        const { Id } = req.params;


        const endereco = await Endereco.findByPk(Id);


        if (!endereco) {
            return res.status(404).json({ error: 'Endereço não encontrado' });
        }


        await endereco.destroy();


        res.status(204).send();
    } catch (error) {
        res.status(500).json({ error: 'Erro ao deletar endereço', details: error.message });
    }
};

const axios = require('axios');

exports.createEnderecoByCep = async (req, res) => {
    try {
        const { cep } = req.params;
        const cleanedCep = cep.replace(/\D/g, '');
        const response = await axios.get(`https://viacep.com.br/ws/${cleanedCep}/json/`);

        if (response.data.erro) {
            return res.status(404).json({ error: 'CEP não encontrado' });
        }

        const { logradouro, complemento, bairro, localidade, uf, ibge } = response.data;
        const { numero } = req.body;

        const novoEndereco = await Endereco.create({
            Cep: cleanedCep,
            Logradouro: logradouro,
            Numero: numero,
            Complemento: complemento || '',
            Bairro: bairro,
            Cidade: localidade,
            Estado: uf,
            MunicipioIBGE: ibge
        });

        res.status(201).json(novoEndereco);
    } catch (error) {
        res.status(500).json({ error: 'Erro ao criar endereço', details: error.message });
    }
};
